/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./bin/js/components/LeftBar/LeftBar.js":
/*!**********************************************!*\
  !*** ./bin/js/components/LeftBar/LeftBar.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Logger = __webpack_require__(/*! ../../helpers/Logger */ "./bin/js/helpers/Logger.js");
var LeftBar = /*#__PURE__*/function () {
  /**
   * @param {string} barId The ID for the left menu bar wrapper.
   * @returns {LeftBar} Instance of.
   */
  function LeftBar(barId) {
    _classCallCheck(this, LeftBar);
    LeftBar.WRAP = document.querySelector(barId);
    if (!LeftBar.WRAP) {
      Logger.log('LeftBar: targetElement must be an HTMLElement', 'error');
      return;
    }
    this._initControls();
  }

  /**
   * Initialize left bar controls.
   *
   * @private
   * @returns {void}
   */
  return _createClass(LeftBar, [{
    key: "_initControls",
    value: function _initControls() {
      // initialize left bar control buttons.
      document.querySelectorAll('.w2p-leftbar-btn').forEach(function (el) {
        el.addEventListener('click', function () {
          document.querySelectorAll('.w2p-leftbar-btn').forEach(function (el) {
            el.classList.remove('active');
          });
          document.querySelectorAll('.w2p-leftbar-toolbar').forEach(function (el) {
            el.classList.remove('active');
          });
          var toolbarId = el.id;
          var toolbar = document.querySelector("[data-ref=\"".concat(toolbarId, "\"]"));
          toolbar.classList.add('active');
          el.classList.add('active');
          LeftBar.SELECTED_CONTROL = {
            id: toolbarId,
            toolbar: toolbar,
            button: el
          };
        });
      });

      // initialize left bar properties button.
      document.querySelector('.w2p-leftbar-btn-props').addEventListener('click', function (evt) {
        evt.preventDefault();
        evt.stopImmediatePropagation();
        if (LeftBar.PROPERTIES_TAB_OPEN) {
          LeftBar.PROPERTIES_TAB_OPEN = false;
          evt.currentTarget.classList.remove('active');
        } else {
          LeftBar.PROPERTIES_TAB_OPEN = true;
          evt.currentTarget.classList.add('active');
        }
        var customEvent = new CustomEvent(LeftBar.W2P_LEFTBAR_PROPS_EVENT, {
          bubbles: true,
          detail: {
            open: LeftBar.PROPERTIES_TAB_OPEN
          }
        });
        evt.currentTarget.dispatchEvent(customEvent);
      });
    }
  }]);
}();
/**
 * @param {string|null} WRAP The HTMLElement for the left bar DivElement.
 * @static
 */
_defineProperty(LeftBar, "WRAP", null);
/**
 * @param {object|null} SELECTED_CONTROL Tracks the currently selected control and toolbar.
 * @static
 */
_defineProperty(LeftBar, "SELECTED_CONTROL", null);
/**
 * @param {string} W2P_LEFTBAR_PROPS_EVENT The event name for the props click event.
 * @static
 */
_defineProperty(LeftBar, "W2P_LEFTBAR_PROPS_EVENT", 'w2p:propsClicked');
/**
 * @param {boolean} PROPERTIES_TAB_OPEN The state of the properties tab.
 * @static
 */
_defineProperty(LeftBar, "PROPERTIES_TAB_OPEN", false);
module.exports = LeftBar;

/***/ }),

/***/ "./bin/js/components/Loading/Loading.js":
/*!**********************************************!*\
  !*** ./bin/js/components/Loading/Loading.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Logger = __webpack_require__(/*! ../../helpers/Logger */ "./bin/js/helpers/Logger.js");
var W2PLoading = /*#__PURE__*/function () {
  /**
   * @param {HTMLElement} targetElement The element in which W2PLoading will be attached to.
   * @param {String} message Message to be displayed.
   * @returns {W2PLoading} Instance of.
   */
  function W2PLoading(targetElement, message) {
    _classCallCheck(this, W2PLoading);
    if (!targetElement instanceof HTMLElement) {
      Logger.log('W2PLoading: targetElement must be an HTMLElement', 'error');
      return;
    }
    var text = document.createElement('div');
    var wrap = document.createElement('div');
    wrap.id = 'w2p-loading';
    text.classList.add('w2p-loading-text');
    wrap.innerHTML = W2PLoading.ANIMATED_SVG;
    wrap.appendChild(text);
    if (message) {
      text.innerHTML = message;
    }
    this.textWrap = text;
    this.wrap = wrap;
    this.targetElement = targetElement;
    this.targetElement.appendChild(this.wrap);
  }

  /**
   * Destroys the W2PLoading instance by removing the loading animation from the target element
   * and setting all internal references to null (GC).
   *
   * @returns {void}
   */
  return _createClass(W2PLoading, [{
    key: "destroy",
    value: function destroy() {
      this.targetElement.removeChild(this.wrap);
      this.wrap = null;
      this.textWrap = null;
      this.targetElement = null;
    }

    /**
     * Hides the loading animation on the target element.
     * The animation will not be removed from the DOM.
     *
     * @returns {void}
     */
  }, {
    key: "hide",
    value: function hide() {
      if (!this.wrap) {
        return;
      }
      this.wrap.classList.add('w2p-loading-hidden');
    }

    /**
     * Shows the loading animation on the target element.
     *
     * @returns {void}
     */
  }, {
    key: "show",
    value: function show() {
      if (!this.wrap) {
        return;
      }
      this.wrap.removeAttribute('style');
      this.wrap.classList.remove('w2p-loading-hidden');
    }

    /**
     * Updates the loading animation message on the target element.
     *
     * @param {string} message Message to be displayed on the loading animation.
     * @returns {void}
     */
  }, {
    key: "message",
    value: function message(_message) {
      if (!this.textWrap) {
        return;
      }
      this.textWrap.innerHTML = _message;
    }
  }]);
}();
/**
 * Defines the animated SVG used by W2PLoading UI.
 * @param {String} ANIMATED_SVG
 * @static
 * @readonly
 * @type {String}
 */
_defineProperty(W2PLoading, "ANIMATED_SVG", "<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"#1e88e5\" stroke-width=\"8\" fill=\"none\" stroke-linecap=\"round\">\n                                <animateTransform\n                                attributeName=\"transform\"\n                                type=\"rotate\"\n                                from=\"0 50 50\"\n                                to=\"360 50 50\"\n                                dur=\"1s\"\n                                repeatCount=\"indefinite\"/>\n                                <animate\n                                attributeName=\"stroke-dasharray\"\n                                values=\"1,251;120,251;1,251\"\n                                dur=\"1.5s\"\n                                repeatCount=\"indefinite\"/>\n                            </circle>\n                            </svg>\n                            ");
module.exports = W2PLoading;

/***/ }),

/***/ "./bin/js/components/MainWindow/MainWindow.js":
/*!****************************************************!*\
  !*** ./bin/js/components/MainWindow/MainWindow.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Logger = __webpack_require__(/*! ../../helpers/Logger */ "./bin/js/helpers/Logger.js");
var Measure = __webpack_require__(/*! ../../helpers/Measure */ "./bin/js/helpers/Measure.js");
var MainWindow = /*#__PURE__*/function () {
  /**
   * @param {string} elId The ID for the main window wrapper element.
   * @returns {MainWindow} Instance of.
   */
  function MainWindow(elId) {
    _classCallCheck(this, MainWindow);
    MainWindow.WRAP = document.querySelector(elId);
    if (!MainWindow.WRAP) {
      Logger.log('MainWindow: targetElement must be an HTMLElement', 'error');
      return;
    }
  }

  /**
   * Renders the given template and returns a promise.
   * The promise is resolved after all pages are rendered and the pages scale is updated.
   * The promise is rejected if the given template is invalid.
   *
   * @param {object} template - The template to render.
   * @returns {Promise<void>} A promise that is resolved after all pages are rendered and the pages scale is updated.
   */
  return _createClass(MainWindow, [{
    key: "render",
    value: function render(template) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        _this._resolveMeasure(template);
        var i;
        for (i = 0; i < template.sides.length; i++) {
          _this._renderPages(template.sides[i], template.measure);
        }

        // display first page.
        MainWindow.PAGES[MainWindow.PAGE_ACTIVE].page.classList.add('active');

        // add page elements.
        for (i = 0; i < MainWindow.PAGES.length; i++) {
          _this._addPageElements(MainWindow.PAGES[i]);
        }

        // update pages scale.
        _this._updatePagesScale();

        // set the dynamic document mask to the width and height of the main window wrapper element.
        MainWindow.WRAP.style.setProperty('--w2p-dynamic-document-mask-width', "".concat(Math.round(MainWindow.TEMPLATE.measure.pxWidth), "px"));
        MainWindow.WRAP.style.setProperty('--w2p-dynamic-document-mask-height', "".concat(Math.round(MainWindow.TEMPLATE.measure.pxHeight), "px"));
        MainWindow.WRAP.style.setProperty('--w2p-dynamic-document-scale', "".concat(MainWindow.PAGE_SCALE.toFixed(4)));

        // update UI page count.
        document.querySelector('#w2p-main-doc-page').textContent = "Displaying page ".concat(MainWindow.PAGE_ACTIVE + 1, " of ").concat(MainWindow.PAGES.length, " pages.");

        // initialize document pagination.
        _this._initPagination();

        // wait for frame refresh (min. 1ms)
        setTimeout(function () {
          resolve();
        }, 1000);
      });
    }

    /**
     * Creates a new text element and appends it to the given page.
     *
     * @param {HTMLDivElement} page The target page in which text should be add.
     * @param {object} textObj The text object.
     * @property {number} textObj.x The x position of the text.
     * @property {number} textObj.y The y position of the text.
     * @property {string} textObj.text The text content.
     * @property {number} textObj.size The text size.
     * @property {string} textObj.color The text color.
     * @property {string} textObj.align The text alignment.
     * @property {number} textObj.rotate The text rotation.
     * @property {string} textObj.font The text font.
     * @property {boolean} textObj.bold The text bold status.
     * @property {boolean} textObj.italic The text italic status.
     * @property {boolean} textObj.underline The text underline status.
     * @property {boolean} textObj.locked The text locked status.
     * @returns {void}
     */
  }, {
    key: "newText",
    value: function newText(page, textObj) {
      var _this2 = this;
      var text = document.createElement('div');
      var measure = MainWindow.PAGES[MainWindow.PAGE_ACTIVE].measure;
      text.classList.add('w2p-text');
      if (measure.type === 'mm') {
        text.style.left = "".concat(Measure.convertMMToPixels(textObj.x, measure.dpi), "px");
        text.style.top = "".concat(Measure.convertMMToPixels(textObj.y, measure.dpi), "px");
      } else {
        text.style.left = "".concat(Measure.convertINToPixels(textObj.x, measure.dpi), "px");
        text.style.top = "".concat(Measure.convertINToPixels(textObj.y, measure.dpi), "px");
      }
      text.style.fontSize = "".concat(Measure.ptToPx(textObj.size), "px");
      text.style.color = "".concat(textObj.color);
      text.style.textAlign = "".concat(textObj.align);
      text.style.transform = "rotate(".concat(textObj.rotate, "deg)");
      text.style.fontFamily = "".concat(textObj.font);
      text.style.fontWeight = "".concat(textObj.bold ? 'bold' : 'normal');
      text.style.fontStyle = "".concat(textObj.italic ? 'italic' : 'normal');
      text.style.textDecoration = "".concat(textObj.underline ? 'underline' : 'none');
      text.innerText = textObj.text;
      page.appendChild(text);
      if (textObj.locked) {
        MainWindow.SELECTED_ELEMENT = event.currentTarget;
        return text;
      }
      text.addEventListener('click', function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (MainWindow.SELECTED_ELEMENT === event.currentTarget) {
          return;
        }
        _this2._moveWrapper(event.currentTarget);
        var customEvent = new CustomEvent(MainWindow.W2P_SELECTED_ELEMENT_EVENT, {
          bubbles: true,
          detail: {
            element: event.currentTarget,
            page: page
          }
        });
        MainWindow.SELECTED_ELEMENT = event.currentTarget;
        event.currentTarget.dispatchEvent(customEvent);
      });
      return text;
    }

    /**
     * Creates a new image element and appends it to the given page.
     * Supports PNG and JPEG image formats.
     *
     * @param {HTMLElement} page - The page element to append the image element to.
     * @param {Object} imageObj - The image object containing the image properties.
     * @property {string} imageObj.src - The source URL of the image.
     * @property {number} imageObj.x - The x position of the image element in the page coordinate system.
     * @property {number} imageObj.y - The y position of the image element in the page coordinate system.
     * @property {number} imageObj.width - The width of the image element in the page coordinate system.
     * @property {number} imageObj.height - The height of the image element in the page coordinate system.
     * @property {number} imageObj.rotate - The rotation of the image element in degrees.
     * @property {boolean} imageObj.locked - Whether the image element is locked or not.
     * @returns {void}
     */
  }, {
    key: "newImage",
    value: function newImage(page, imageObj) {
      var _this3 = this;
      var image = document.createElement('img');
      var measure = MainWindow.PAGES[MainWindow.PAGE_ACTIVE].measure;
      image.classList.add('w2p-image');
      if (measure.type === 'mm') {
        image.style.left = "".concat(Measure.convertMMToPixels(imageObj.x, measure.dpi), "px");
        image.style.top = "".concat(Measure.convertMMToPixels(imageObj.y, measure.dpi), "px");
        image.style.width = "".concat(Measure.convertMMToPixels(imageObj.width, measure.dpi), "px");
        image.style.height = "".concat(Measure.convertMMToPixels(imageObj.height, measure.dpi), "px");
      } else {
        image.style.left = "".concat(Measure.convertINToPixels(imageObj.x, measure.dpi), "px");
        image.style.top = "".concat(Measure.convertINToPixels(imageObj.y, measure.dpi), "px");
        image.style.width = "".concat(Measure.convertINToPixels(imageObj.width, measure.dpi), "px");
        image.style.height = "".concat(Measure.convertINToPixels(imageObj.height, measure.dpi), "px");
      }
      image.src = imageObj.src;
      image.style.transform = "rotate(".concat(imageObj.rotate, "deg)");
      image.draggable = false;
      page.appendChild(image);
      if (imageObj.locked) {
        MainWindow.SELECTED_ELEMENT = event.currentTarget;
        return image;
      }
      image.addEventListener('click', function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (MainWindow.SELECTED_ELEMENT === event.currentTarget) {
          return;
        }
        _this3._moveWrapper(event.currentTarget);
        var customEvent = new CustomEvent(MainWindow.W2P_SELECTED_ELEMENT_EVENT, {
          bubbles: true,
          detail: {
            element: event.currentTarget,
            page: page
          }
        });
        MainWindow.SELECTED_ELEMENT = event.currentTarget;
        event.currentTarget.dispatchEvent(customEvent);
      });
      return image;
    }

    /**
     * Creates a new shape element and appends it to the given page.
     * Supports SVG only.
     *
     * @param {HTMLElement} page - The page element to append the shape element to.
     * @param {Object} shapeObj - The shape object containing the shape properties.
     * @property {string} shapeObj.src - The source URL of the shape SVG.
     * @property {number} shapeObj.x - The x position of the shape element in the page coordinate system.
     * @property {number} shapeObj.y - The y position of the shape element in the page coordinate system.
     * @property {number} shapeObj.width - The width of the shape element in the page coordinate system.
     * @property {number} shapeObj.height - The height of the shape element in the page coordinate system.
     * @property {string} shapeObj.color - The fill color of the shape element.
     * @property {number} shapeObj.rotate - The rotation of the shape element in degrees.
     * @property {boolean} shapeObj.locked - Whether the shape element is locked or not.
     * @returns {void}
     */
  }, {
    key: "newShape",
    value: function newShape(page, shapeObj) {
      var _this4 = this;
      var measure = MainWindow.PAGES[MainWindow.PAGE_ACTIVE].measure;
      fetch(shapeObj.src).then(function (response) {
        return response.text();
      }).then(function (svg) {
        svg = svg.replaceAll(/fill\s*=\s*(['"])(#[0-9a-f]{3,6}|rgb\([^)]*\)|rgba\([^)]*\)|[a-zA-Z]+)\1/gi, "fill=\"".concat(shapeObj.color, "\""));
        var parser = new DOMParser();
        var svgDoc = parser.parseFromString(svg, 'image/svg+xml');
        var svgEl = svgDoc.documentElement;
        svgEl.classList.add('w2p-shape');
        if (measure.type === 'mm') {
          svgEl.setAttribute('width', Measure.convertMMToPixels(shapeObj.width, measure.dpi));
          svgEl.setAttribute('height', Measure.convertMMToPixels(shapeObj.height, measure.dpi));
          svgEl.style.left = Measure.convertMMToPixels(Measure.convertMMToPixels(shapeObj.x, measure.dpi));
          svgEl.style.top = Measure.convertMMToPixels(Measure.convertMMToPixels(shapeObj.y, measure.dpi));
        } else {
          svgEl.setAttribute('width', Measure.convertINToPixels(shapeObj.width, measure.dpi));
          svgEl.setAttribute('height', Measure.convertINToPixels(shapeObj.height, measure.dpi));
          svgEl.style.left = Measure.convertINToPixels(Measure.convertINToPixels(shapeObj.x, measure.dpi));
          svgEl.style.top = Measure.convertINToPixels(Measure.convertINToPixels(shapeObj.y, measure.dpi));
        }
        svgEl.style.transform = "rotate(".concat(shapeObj.rotate, "deg)");
        page.appendChild(svgEl);
        if (shapeObj.locked) {
          MainWindow.SELECTED_ELEMENT = svgEl;
          return svgEl;
        }
        svgEl.addEventListener('click', function (event) {
          event.preventDefault();
          event.stopPropagation();
          if (MainWindow.SELECTED_ELEMENT === event.currentTarget) {
            return;
          }
          _this4._moveWrapper(event.currentTarget);
          var customEvent = new CustomEvent(MainWindow.W2P_SELECTED_ELEMENT_EVENT, {
            bubbles: true,
            detail: {
              element: event.currentTarget,
              page: page
            }
          });
          MainWindow.SELECTED_ELEMENT = event.currentTarget;
          event.currentTarget.dispatchEvent(customEvent);
        });
        return svgEl;
      })["catch"](function (error) {
        Logger.log('MainWindow: unable to load shape source. Error: ' + error, 'error');
      });
    }

    /**
     * Updates the main window scale UI with the given scale.
     * The scale is displayed as a percentage value.
     *
     * @param {number} scale - The scale value to update the element with.
     * @returns {void}
     */
  }, {
    key: "_scaleUi",
    value: function _scaleUi(scale) {
      document.getElementById('w2p-main-scale').innerText = "Zoom: ".concat((scale * 100).toFixed(0), "%");
    }

    /**
     * Adds page elements like bleed lines, cut lines, text, images and shapes.
     *
     * @param {object} page - Page object.
     * @returns {void}
     */
  }, {
    key: "_addPageElements",
    value: function _addPageElements(page) {
      // add bleed lines.
      var bleed = document.createElement('div');
      bleed.classList.add('w2p-bleed');
      bleed.style.width = "calc(100% - ".concat(page.measure.pxBleed * 2, "px)");
      bleed.style.height = "calc(100% - ".concat(page.measure.pxBleed * 2, "px)");
      bleed.style.top = "".concat(page.measure.pxBleed, "px");
      bleed.style.left = "".concat(page.measure.pxBleed, "px");
      page.page.appendChild(bleed);
      page.ui = {
        bleed: bleed
      };

      // add cutlines.
      var cutlines = document.createElement('div');
      cutlines.classList.add('w2p-cutlines');
      cutlines.style.width = "calc(100% - ".concat(page.measure.pxCut * 2, "px)");
      cutlines.style.height = "calc(100% - ".concat(page.measure.pxCut * 2, "px)");
      cutlines.style.top = "".concat(page.measure.pxCut, "px");
      cutlines.style.left = "".concat(page.measure.pxCut, "px");
      page.page.appendChild(cutlines);
      page.ui.cutlines = cutlines;

      // add text.
      var i;
      page.ui.text = [];
      page.ui.image = [];
      page.ui.shape = [];
      for (i = 0; i < page.elements.text.length; i++) {
        page.ui.text.push(this.newText(page.page, page.elements.text[i]));
      }

      // add images.
      for (i = 0; i < page.elements.images.length; i++) {
        page.ui.image.push(this.newImage(page.page, page.elements.images[i]));
      }

      // add shapes.
      for (i = 0; i < page.elements.shapes.length; i++) {
        page.ui.shape.push(this.newShape(page.page, page.elements.shapes[i]));
      }
    }

    /**
     * Renders a single page based on the given side and measure.
     * Creates a page wrapper element with the given width and height, and appends it to the main window wrapper element.
     * Creates the background image layer element and appends it to the page.
     * If the side has a background image, it creates an img element and appends it to the image layer element.
     * Adds an event listener to the window resize event to update the page scale.
     *
     * @private
     * @param {Object} side The side object containing background color and image.
     * @param {Object} measure The measure object containing width and height in pixels.
     * @returns {void}
     */
  }, {
    key: "_renderPages",
    value: function _renderPages(side, measure) {
      var _this5 = this;
      var width = Math.round(measure.pxWidth);
      var height = Math.round(measure.pxHeight);
      var wrapper = document.createElement('div');
      var imageLayer = document.createElement('div');
      wrapper.classList.add('w2p-main-page');
      wrapper.style.width = "".concat(width, "px");
      wrapper.style.height = "".concat(height, "px");
      wrapper.style.backgroundColor = side.background.color;
      imageLayer.classList.add('w2p-main-page-bglayer');
      imageLayer.style.width = "100%";
      imageLayer.style.height = "100%";
      imageLayer.style.overflow = 'hidden';
      wrapper.appendChild(imageLayer);
      if (side.background.image) {
        var image = document.createElement('img');
        image.draggable = false;
        image.src = side.background.image;
        image.style.width = '100%';
        image.style.height = '100%';
        imageLayer.appendChild(image);
      }
      side.background.wrap = imageLayer;
      MainWindow.WRAP.appendChild(wrapper);
      MainWindow.PAGES.push({
        elements: side,
        measure: measure,
        page: wrapper
      });

      // update page size on window resize.
      window.addEventListener('resize', function () {
        _this5._updatePagesScale();
      });
    }

    /**
     * Updates the scale of all pages in MainWindow.PAGES array.
     * The scale of each page is calculated based on the width and height of the page and the width and height of the main window wrapper element.
     * The scale is then applied to the page wrapper element using CSS transform property.
     *
     * @private
     * @returns {void}
     */
  }, {
    key: "_updatePagesScale",
    value: function _updatePagesScale() {
      for (var i = 0; i < MainWindow.PAGES.length; i++) {
        var wrapper = MainWindow.PAGES[i].page;
        var measure = MainWindow.PAGES[i].measure;
        var scale = Measure.calculateScale(measure.pxWidth, measure.pxHeight, MainWindow.WRAP.offsetWidth, MainWindow.WRAP.offsetHeight);
        wrapper.style.top = '50%';
        wrapper.style.left = '50%';
        wrapper.style.transform = "translate(-50%, -50%) scale(".concat(scale, ")");
        MainWindow.PAGE_SCALE = scale;
      }
      MainWindow.WRAP.style.setProperty('--w2p-dynamic-document-mask-width', "".concat(Math.round(MainWindow.TEMPLATE.measure.pxWidth), "px"));
      MainWindow.WRAP.style.setProperty('--w2p-dynamic-document-mask-height', "".concat(Math.round(MainWindow.TEMPLATE.measure.pxHeight), "px"));
      MainWindow.WRAP.style.setProperty('--w2p-dynamic-document-scale', "".concat(MainWindow.PAGE_SCALE.toFixed(4)));

      // send scale change event.
      var customEvent = new CustomEvent(MainWindow.W2P_SCALE_EVENT, {
        bubbles: true,
        detail: {
          scale: MainWindow.PAGE_SCALE
        }
      });
      MainWindow.WRAP.dispatchEvent(customEvent);
      this._scaleUi(MainWindow.PAGE_SCALE);
    }

    /**
     * Resolves the measure of the given template by converting the width, height, bleed and cut from mm or in to pixels.
     * The dpi of the measure is used to perform the conversion.
     * The resolved measure is stored in MainWindow.TEMPLATE.
     *
     * @param {object} template - The template to resolve the measure of.
     * @private
     * @returns {void}
     */
  }, {
    key: "_resolveMeasure",
    value: function _resolveMeasure(template) {
      if (template.measure.type === 'mm') {
        template.measure.pxWidth = Measure.convertMMToPixels(template.measure.width, template.measure.dpi);
        template.measure.pxHeight = Measure.convertMMToPixels(template.measure.height, template.measure.dpi);
        template.measure.pxBleed = Measure.convertMMToPixels(template.measure.bleed, template.measure.dpi);
        template.measure.pxCut = Measure.convertMMToPixels(template.measure.cut, template.measure.dpi);
      } else {
        template.measure.pxWidth = Measure.convertINToPixels(template.measure.width, template.measure.dpi);
        template.measure.pxHeight = Measure.convertINToPixels(template.measure.height, template.measure.dpi);
        template.measure.pxBleed = Measure.convertINToPixels(template.measure.bleed, template.measure.dpi);
        template.measure.pxCut = Measure.convertINToPixels(template.measure.cut, template.measure.dpi);
      }
      MainWindow.TEMPLATE = template;
    }

    /**
     * Initializes the pagination of the main window document pages.
     *
     * @private
     * @returns {void}
     */
  }, {
    key: "_initPagination",
    value: function _initPagination() {
      var prevbtn = document.getElementById('w2p-main-doc-prev-btn');
      var nextbtn = document.getElementById('w2p-main-doc-next-btn');
      var label = document.getElementById('w2p-main-doc-page');
      var paginateTo = function paginateTo(index) {
        var i;
        for (i = 0; i < MainWindow.PAGES.length; i++) {
          if (i === index) {
            MainWindow.PAGES[i].page.classList.add('active');
            label.textContent = "Displaying page ".concat(index + 1, " of ").concat(MainWindow.PAGES.length, " pages.");
          } else {
            MainWindow.PAGES[i].page.classList.remove('active');
          }
        }
      };
      if (MainWindow.PAGES.length < 2) {
        prevbtn.classList.add('disabled');
        prevbtn.style.display = 'none';
        nextbtn.classList.add('disabled');
        nextbtn.style.display = 'none';
        return;
      }
      var currentPageIndex = MainWindow.PAGE_ACTIVE;
      prevbtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        currentPageIndex--;
        if (currentPageIndex < 0) {
          currentPageIndex = 0;
        }
        if (currentPageIndex === MainWindow.PAGE_ACTIVE) {
          return;
        }
        if (currentPageIndex === 0) {
          prevbtn.classList.add('disabled');
        }
        nextbtn.classList.remove('disabled');
        MainWindow.PAGE_ACTIVE = currentPageIndex;
        paginateTo(currentPageIndex);
      });
      nextbtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        currentPageIndex++;
        if (currentPageIndex > MainWindow.PAGES.length - 1) {
          currentPageIndex = MainWindow.PAGES.length - 1;
        }
        if (currentPageIndex === MainWindow.PAGE_ACTIVE) {
          return;
        }
        if (currentPageIndex + 1 >= MainWindow.PAGES.length) {
          nextbtn.classList.add('disabled');
        }
        prevbtn.classList.remove('disabled');
        MainWindow.PAGE_ACTIVE = currentPageIndex;
        paginateTo(currentPageIndex);
      });
    }
  }, {
    key: "_moveWrapper",
    value: function _moveWrapper(element) {
      var wrap = document.createElement('div');
      var page = element.parentElement;
      var padding = 2;
      wrap.classList.add('w2p-element-wrap');
      if (element.tagName === 'svg') {
        wrap.style.top = "".concat(parseFloat(getComputedStyle(element).top) - padding, "px");
        wrap.style.left = "".concat(parseFloat(getComputedStyle(element).left) - padding, "px");
        wrap.style.width = "".concat(element.width.baseVal.value, "px");
        wrap.style.height = "".concat(element.height.baseVal.value, "px");
      } else {
        wrap.style.top = "".concat(element.offsetTop - padding, "px");
        wrap.style.left = "".concat(element.offsetLeft - padding, "px");
        wrap.style.width = "".concat(element.offsetWidth, "px");
        wrap.style.height = "".concat(element.offsetHeight, "px");
      }
      wrap.style.position = 'absolute';
      wrap.style.transform = element.style.transform;
      wrap.style.cursor = 'grab';
      page.insertBefore(wrap, element);
      wrap.appendChild(element);
      var scale = MainWindow.PAGE_SCALE || 1;
      var startLocalX = 0,
        startLocalY = 0;
      var origLeft = 0,
        origTop = 0;
      var isDown = false;
      var invMatrix = null;
      var rect = null;
      function getInverseMatrix(el) {
        var t = getComputedStyle(el).transform;
        if (!t || t === 'none') return new DOMMatrix();
        return new DOMMatrix(t).inverse();
      }
      function clientToLocal(clientX, clientY) {
        var px = clientX - rect.left;
        var py = clientY - rect.top;
        var local = invMatrix.transformPoint(new DOMPoint(px, py));
        return {
          x: local.x,
          y: local.y
        };
      }
      wrap.addEventListener('mousedown', function (e) {
        isDown = true;
        wrap.style.cursor = 'grabbing';

        // Lock matrix + rect at drag start
        rect = wrap.getBoundingClientRect();
        invMatrix = getInverseMatrix(wrap);
        var local = clientToLocal(e.clientX, e.clientY);
        startLocalX = local.x;
        startLocalY = local.y;
        origLeft = parseFloat(wrap.style.left || 0);
        origTop = parseFloat(wrap.style.top || 0);
        e.preventDefault();
      });
      document.addEventListener('mouseup', function () {
        if (!isDown) return;
        isDown = false;
        wrap.style.cursor = 'grab';
      });
      document.addEventListener('mousemove', function (e) {
        if (!isDown) return;

        // Use locked rect+matrix from mousedown
        var local = clientToLocal(e.clientX, e.clientY);
        var dx = (local.x - startLocalX) / scale;
        var dy = (local.y - startLocalY) / scale;
        wrap.style.left = "".concat(origLeft + dx, "px");
        wrap.style.top = "".concat(origTop + dy, "px");
      });
    }
  }]);
}();
/**
 * @param {HTMLElement|null} WRAP The main window wrapper element.
 * @static
 * @type {HTMLElement|null}
 */
_defineProperty(MainWindow, "WRAP", null);
/**
 * @param {object|null} TEMPLATE The template to render.
 * @static
 * @type {object|null}
 */
_defineProperty(MainWindow, "TEMPLATE", null);
/**
 * @param {array|null} PAGES Tracks the document pages.
 * @static
 * @type {array|null}
 */
_defineProperty(MainWindow, "PAGES", []);
/**
 * @param {number} PAGE_ACTIVE The index of the active page on MainWindow.PAGES array.
 * @static
 * @type {number}
 */
_defineProperty(MainWindow, "PAGE_ACTIVE", 0);
/**
 * @param {number} PAGE_SCALE The scale of the page.
 * @static
 * @type {number}
 */
_defineProperty(MainWindow, "PAGE_SCALE", 1);
/**
 * @param {string} W2P_SELECTED_ELEMENT_EVENT The event name for selected element.
 * @static
 * @type {string}
 */
_defineProperty(MainWindow, "W2P_SELECTED_ELEMENT_EVENT", 'w2p:selected-element');
/**
 * @param {string} W2P_SCALE_EVENT The event name for scale event.
 * @static
 * @type {string}
 */
_defineProperty(MainWindow, "W2P_SCALE_EVENT", 'w2p:scale');
/**
 * @param {HTMLElement|null} SELECTED_ELEMENT The selected HTMLElement object.
 * @static
 * @type {HTMLElement|null}
 */
_defineProperty(MainWindow, "SELECTED_ELEMENT", null);
module.exports = MainWindow;

/***/ }),

/***/ "./bin/js/components/RightBar/RightBar.js":
/*!************************************************!*\
  !*** ./bin/js/components/RightBar/RightBar.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Logger = __webpack_require__(/*! ../../helpers/Logger */ "./bin/js/helpers/Logger.js");
var RightBar = /*#__PURE__*/function () {
  /**
   * @param {string} barId The ID for the right bar DivElement.
   * @returns {RightBar} Instance of.
   */
  function RightBar(barId) {
    _classCallCheck(this, RightBar);
    RightBar.WRAP = document.querySelector(barId);
    if (!RightBar.WRAP) {
      Logger.log('RightBar: targetElement must be an HTMLElement', 'error');
      return;
    }
  }

  /**
   * Shows the right bar.
   *
   * @returns {void}
   */
  return _createClass(RightBar, [{
    key: "show",
    value: function show() {
      RightBar.WRAP.classList.remove('w2p-rightbar-hide');
      RightBar.WRAP.classList.add('w2p-rightbar-show');
    }

    /**
     * Hides the right bar.
     *
     * @returns {void}
     */
  }, {
    key: "hide",
    value: function hide() {
      RightBar.WRAP.classList.remove('w2p-rightbar-show');
      RightBar.WRAP.classList.add('w2p-rightbar-hide');
    }
  }]);
}();
/**
 * @param {HTMLDivElement|null} WRAP The DivElement for the right bar.
 * @static
 * @type {HTMLElement}
 */
_defineProperty(RightBar, "WRAP", null);
module.exports = RightBar;

/***/ }),

/***/ "./bin/js/helpers/Logger.js":
/*!**********************************!*\
  !*** ./bin/js/helpers/Logger.js ***!
  \**********************************/
/***/ ((module) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Logger = /*#__PURE__*/function () {
  function Logger() {
    _classCallCheck(this, Logger);
  }
  return _createClass(Logger, null, [{
    key: "log",
    value:
    /**
     * Logs a message with a prefix and location information.
     *
     * @todo Implement logging to a file.
     * @param {string} message Message to be logged.
     * @param {string|null} prefix Prefix to be used for the log message. Can be one of 'error', 'warning', 'success', or 'info'. Default: `info`.
     * @returns {void}
     */
    function log(message) {
      var _stack$split$2$trim;
      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'error';
      // get message origin.
      var stack = new Error().stack;
      var callerLine = (_stack$split$2$trim = stack.split('\n')[2].trim()) !== null && _stack$split$2$trim !== void 0 ? _stack$split$2$trim : '[unknown]';
      var match = callerLine.match(/\((.*):(\d+):(\d+)\)$/) || callerLine.match(/at (.*):(\d+):(\d+)/);
      var location = 'unknown';
      var bgColor = this.INFO_BG_COLOR;
      var mPrefix = this.INFO_PREFIX;
      if (match) {
        location = "".concat(match[1], ":").concat(match[2]);
      }

      // validate prefix.
      prefix = prefix.trim().toLowerCase();
      switch (prefix) {
        case 'error':
          mPrefix = this.ERROR_PREFIX;
          bgColor = this.ERROR_BG_COLOR;
          break;
        case 'warning':
          mPrefix = this.WARNING_PREFIX;
          bgColor = this.WARNING_BG_COLOR;
          break;
        case 'success':
          mPrefix = this.SUCCESS_PREFIX;
          bgColor = this.SUCCESS_BG_COLOR;
          break;
        case 'info':
          mPrefix = this.INFO_PREFIX;
          bgColor = this.INFO_BG_COLOR;
          break;
      }

      // print message.
      console.log("\n%c::::::::::::::::::::::::::::::::\n::: Web2Print v1.0.0         :::\n::: Created by J. Taniguchi  :::\n:::=> ".concat(mPrefix, "\n:::::::::::::::::::::::::::::::::%c\n\n").concat(message, "\n\n%c::::::::::::::::::::::::::::::::\n::: Throwed at:              :::\n::::::::::::::::::::::::::::::::\n").concat(location), "background: #ddd; color: ".concat(bgColor, ";"), "color: ".concat(bgColor, ";"), 'background: transparent; color: #333333;');
    }
  }]);
}();
_defineProperty(Logger, "ERROR_PREFIX", '[ERROR]');
_defineProperty(Logger, "ERROR_BG_COLOR", 'tomato');
_defineProperty(Logger, "WARNING_PREFIX", '[WARNING]');
_defineProperty(Logger, "WARNING_BG_COLOR", '#a47129ff');
_defineProperty(Logger, "SUCCESS_PREFIX", '[SUCCESS]');
_defineProperty(Logger, "SUCCESS_BG_COLOR", '#629721');
_defineProperty(Logger, "INFO_PREFIX", '[INFO]');
_defineProperty(Logger, "INFO_BG_COLOR", '#1366bfff');
module.exports = Logger;

/***/ }),

/***/ "./bin/js/helpers/Measure.js":
/*!***********************************!*\
  !*** ./bin/js/helpers/Measure.js ***!
  \***********************************/
/***/ ((module) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Used to convert between different units of measure.
 *
 * @class Measure
 * @static
 */
var Measure = /*#__PURE__*/function () {
  function Measure() {
    _classCallCheck(this, Measure);
  }
  return _createClass(Measure, null, [{
    key: "convertMMToPixels",
    value:
    /**
     * Converts a given number of millimeters to pixels.
     * The conversion is done using the given dpi.
     * @param {number} mm - The number of millimeters to convert.
     * @param {number} dpi - The dpi to use for the conversion.
     * @returns {number} The number of pixels equivalent to the given number of millimeters.
     */
    function convertMMToPixels(mm, dpi) {
      if (!Measure.isValidMeasure(mm)) return mm;
      if (!Measure.isValidMeasure(dpi)) return mm;
      return mm * dpi / 25.4;
    }

    /**
     * Converts a given number of inches to pixels.
     * The conversion is done using the given dpi.
     * @param {number} inches - The number of inches to convert.
     * @param {number} dpi - The dpi of the screen.
     * @return {number} The number of pixels converted from inches.
     */
  }, {
    key: "convertINToPixels",
    value: function convertINToPixels(inches, dpi) {
      if (!Measure.isValidMeasure(inches)) return inches;
      if (!Measure.isValidMeasure(dpi)) return inches;
      return inches * dpi;
    }

    /**
     * Converts a given number of pixels to millimeters.
     * The conversion is done using the given dpi.
     * @param {number} pixels - The number of pixels to convert.
     * @param {number} dpi - The dpi to use for the conversion.
     * @returns {number} The number of millimeters equivalent to the given number of pixels.
     */
  }, {
    key: "convertPixelToMM",
    value: function convertPixelToMM(pixels, dpi) {
      if (!Measure.isValidMeasure(pixels)) return pixels;
      if (!Measure.isValidMeasure(dpi)) return pixels;
      return pixels * 25.4 / dpi;
    }

    /**
     * Converts a given number of pixels to inches.
     * The conversion is done using the given dpi.
     *
     * @param {number} pixels - The number of pixels to convert.
     * @param {number} dpi - The dpi of the screen.
     * @return {number} The number of inches converted from pixels.
     */
  }, {
    key: "convertPixelToIN",
    value: function convertPixelToIN(pixels, dpi) {
      if (!Measure.isValidMeasure(pixels)) return pixels;
      if (!Measure.isValidMeasure(dpi)) return pixels;
      return pixels / dpi;
    }

    /**
     * Check if a given number is a valid measure.
     * A measure is valid if it is a positive number.
     *
     * @param {number} number - The number to check.
     * @return {boolean} True if the number is a valid measure, false otherwise.
     */
  }, {
    key: "isValidMeasure",
    value: function isValidMeasure(number) {
      if (typeof number !== 'number') return false;
      if (number < 0.01) return false;
      return true;
    }

    /**
     * Calculate the scale of an image based on its size and the window size.
     * The scale is calculated so that the image will fit in the window with a padding of 100px.
     *
     * @param {number} srcWidth - The width of the image.
     * @param {number} srcHeight - The height of the image.
     * @param {number} windowWidth - The width of the window.
     * @param {number} windowHeight - The height of the window.
     * @return {number} The scale of the image.
     */
  }, {
    key: "calculateScale",
    value: function calculateScale(srcWidth, srcHeight, windowWidth, windowHeight) {
      var scale = 1;
      var padding = 100;
      if (srcWidth > windowWidth - padding) scale = (windowWidth - padding) / srcWidth;
      if (srcHeight > windowHeight - padding) scale = Math.min(scale, (windowHeight - padding) / srcHeight);
      return scale;
    }

    /**
     * Converts a given number of points to pixels.
     * The conversion is done using the ratio 96px / 72pt.
     *
     * @param {number} pt - The number of points to convert.
     * @return {number} The number of pixels equivalent to the given number of points.
     */
  }, {
    key: "ptToPx",
    value: function ptToPx(pt) {
      return pt * 96 / 72;
    }

    /**
     * Converts a given number of pixels to points.
     * The conversion is done using the ratio 72pt / 96px.
     *
     * @param {number} px - The number of pixels to convert.
     * @return {number} The number of points equivalent to the given number of pixels.
     */
  }, {
    key: "pxToPt",
    value: function pxToPt(px) {
      return px * 72 / 96;
    }
  }]);
}();
module.exports = Measure;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./bin/js/app.js ***!
  \***********************/
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Logger = __webpack_require__(/*! ./helpers/Logger */ "./bin/js/helpers/Logger.js");
var W2PRightBar = __webpack_require__(/*! ./components/RightBar/RightBar */ "./bin/js/components/RightBar/RightBar.js");
var W2PLoading = __webpack_require__(/*! ./components/Loading/Loading */ "./bin/js/components/Loading/Loading.js");
var W2PLeftBar = __webpack_require__(/*! ./components/LeftBar/LeftBar */ "./bin/js/components/LeftBar/LeftBar.js");
var W2PMainWindow = __webpack_require__(/*! ./components/MainWindow/MainWindow */ "./bin/js/components/MainWindow/MainWindow.js");
var LeftBar = __webpack_require__(/*! ./components/LeftBar/LeftBar */ "./bin/js/components/LeftBar/LeftBar.js");
var MainWindow = __webpack_require__(/*! ./components/MainWindow/MainWindow */ "./bin/js/components/MainWindow/MainWindow.js");

/**
 * -------------------------------------------------------------------
 * Main logic
 * -------------------------------------------------------------------
 */
var W2P = /*#__PURE__*/function () {
  /**
   * @param {string} appId The app element id.
   * @returns {W2P} Instance of.
   */
  function W2P(appId) {
    _classCallCheck(this, W2P);
    W2P.APP_WRAP = document.getElementById(appId);
    if (!W2P.APP_WRAP) {
      Logger.log('W2P: targetElement must be an HTMLElement', 'error');
      return;
    }
    this._initComponents();
  }
  return _createClass(W2P, [{
    key: "render",
    value: function render(template) {
      if (!this._validateTemplate(template)) {
        Logger.log('W2P: template must be an object literal', 'error');
        return;
      }
      W2P.TEMPLATE_LITERAL = template;
      W2PMainWindow.render(template).then(function () {
        W2PLoading.hide();
      });
    }

    /**
     * Initialize app components.
     *
     * @returns {void}
     */
  }, {
    key: "_initComponents",
    value: function _initComponents() {
      // initialize components.
      W2PLoading = new W2PLoading(W2P.APP_WRAP, 'Initializing...');
      W2PRightBar = new W2PRightBar('#w2p-rightbar');
      W2PLeftBar = new W2PLeftBar('#w2p-leftbar');
      W2PMainWindow = new W2PMainWindow('#w2p-main');

      // listen for events.
      // :: left bar properties.
      W2P.APP_WRAP.addEventListener(LeftBar.W2P_LEFTBAR_PROPS_EVENT, function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        if (e.detail.open) {
          W2PRightBar.show();
          return;
        }
        W2PRightBar.hide();
      });

      //:: selected text event.
      W2P.APP_WRAP.addEventListener(MainWindow.W2P_SELECTED_ELEMENT_EVENT, function (e) {
        var _e$detail$element, _e$detail$page;
        e.preventDefault();
        e.stopImmediatePropagation();
        var element = (_e$detail$element = e.detail.element) !== null && _e$detail$element !== void 0 ? _e$detail$element : null;
        var targetpage = (_e$detail$page = e.detail.page) !== null && _e$detail$page !== void 0 ? _e$detail$page : null;
        if (!element || !targetpage) {
          Logger.log('W2P: selected element event provided no detail context.', 'error');
          return;
        }

        // @todo: selected text must be wrapped by resize/rotate handles.

        console.log('--------- selected element event ---------');
        console.log(element);
        console.log(targetpage);
      });

      //:: scale event.
      W2P.APP_WRAP.addEventListener(MainWindow.W2P_SCALE_EVENT, function (e) {
        var _e$detail$scale;
        e.preventDefault();
        e.stopImmediatePropagation();
        var scale = (_e$detail$scale = e.detail.scale) !== null && _e$detail$scale !== void 0 ? _e$detail$scale : null;
        if (!scale) {
          Logger.log('W2P: scale event provided no detail context.', 'error');
          return;
        }
      });
    }

    /**
     * Validate if the given template is valid.
     *
     * @param {Object} template - The template to validate.
     * @returns {boolean} true if the template is valid, false otherwise.
     *
     * A valid template must be an object literal and contain the following properties:
     * - props: an object containing application props.
     * - measure: an object containing the measure of the application.
     * - sides: an object containing the sides of the application.
     */
  }, {
    key: "_validateTemplate",
    value: function _validateTemplate(template) {
      if (!template || _typeof(template) !== 'object') {
        return false;
      }
      if (!template.hasOwnProperty('props') || _typeof(template.props) !== 'object') {
        return false;
      }
      if (!template.hasOwnProperty('measure') || _typeof(template.measure) !== 'object') {
        return false;
      }
      if (!template.hasOwnProperty('sides') || _typeof(template.sides) !== 'object') {
        return false;
      }
      return true;
    }
  }]);
}();
/**
 * -------------------------------------------------------------------
 * DOMContentLoaded
 * -------------------------------------------------------------------
 */
/**
 * @param {string|null} appId The ID for the app DivElement.
 * @type {HTMLElement}
 * @static
 */
_defineProperty(W2P, "APP_WRAP", null);
/**
 * @param {object|null} templateLiteral The template literal for the app.
 * @type {object}
 * @static
 */
_defineProperty(W2P, "TEMPLATE_LITERAL", null);
document.addEventListener('DOMContentLoaded', function () {
  window.w2p = new W2P('w2p');
});
})();

/******/ })()
;